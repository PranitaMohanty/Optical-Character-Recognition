import torch
import torchvision
from PIL import Image
import torchvision.transforms as transforms

# Load the image
#image = torchvision.load_image('ocr.img')
# Load the image using PIL
image = Image.open('ocr.img').convert('L')
# Convert to grayscale if needed

# Transform the image to a PyTorch tensor
transform = transforms.ToTensor()
image_tensor = transform(image)
# Define the OCR model
class OCRModel(torch.nn.Module):
    def __init__(self):
        super(OCRModel, self).__init__()
        self.conv1 = torch.nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = torch.nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = torch.nn.Dropout2d()
        self.fc1 = torch.nn.Linear(320, 50)
        self.fc2 = torch.nn.Linear(50, 10)

    def forward(self, x):
        x = torch.relu(torch.max_pool2d(self.conv1(x), 2))
        x = torch.relu(torch.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return torch.log_softmax(x, dim=1)

# Initialize the model on the GPU
model_gpu = OCRModel()
model_gpu.to('cuda:0')

# Perform OCR on the image using the GPU
output_gpu = model_gpu(image)

# Print the result
print("GPU Result:")
print(output_gpu)

# Move the model to the CPU
model_cpu = model_gpu.to('cpu')

# Perform OCR on the image using the CPU
output_cpu = model_cpu(image)

# Print the result
print("CPU Result:")
print(output_cpu)